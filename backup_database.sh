#!/bin/bash
# backup_database.sh
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL –¥–ª—è Alekhin Clinic

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# ===========================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ===========================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∏–∑ docker-compose.yaml)
DB_NAME="postgres"
DB_USER="postgres"
DB_PASSWORD="postgres"
DB_HOST="localhost"
DB_PORT="5432"
DB_CONTAINER="backend"  # –ò–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å Django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ç–∫–∞–ø–∞
BACKUP_DIR="/backups"
RETENTION_DAYS=30  # –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–∏—Ç—å –±—ç–∫–∞–ø—ã
MAX_BACKUPS=100    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
TELEGRAM_BOT_TOKEN=""  # –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
TELEGRAM_CHAT_ID=""    # ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
EMAIL_RECIPIENT=""     # Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# ===========================================
# –§–£–ù–ö–¶–ò–ò
# ===========================================

# –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
create_backup_dir() {
    if [ ! -d "$BACKUP_DIR" ]; then
        log_info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–æ–≤: $BACKUP_DIR"
        mkdir -p "$BACKUP_DIR"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
check_database() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    if docker ps | grep -q "$DB_CONTAINER"; then
        log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $DB_CONTAINER –∑–∞–ø—É—â–µ–Ω"
    else
        log_error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $DB_CONTAINER –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    if docker exec "$DB_CONTAINER" pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" > /dev/null 2>&1; then
        log_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞"
    else
        log_error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!"
        exit 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
create_backup() {
    local timestamp=$(date '+%Y%m%d_%H%M%S')
    local backup_filename="alekhin_clinic_backup_${timestamp}.sql"
    local backup_path="$BACKUP_DIR/$backup_filename"
    
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    log_info "–§–∞–π–ª: $backup_filename"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —á–µ—Ä–µ–∑ Docker
    if docker exec "$DB_CONTAINER" pg_dump \
        -h "$DB_HOST" \
        -p "$DB_PORT" \
        -U "$DB_USER" \
        -d "$DB_NAME" \
        --no-password \
        --verbose \
        --clean \
        --if-exists \
        --create \
        --format=plain > "$backup_path" 2>/dev/null; then
        
        log_success "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: $backup_filename"
        
        # –°–∂–∞—Ç–∏–µ –±—ç–∫–∞–ø–∞
        log_info "–°–∂–∞—Ç–∏–µ –±—ç–∫–∞–ø–∞..."
        gzip "$backup_path"
        backup_path="${backup_path}.gz"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        local file_size=$(du -h "$backup_path" | cut -f1)
        log_success "–ë—ç–∫–∞–ø —Å–∂–∞—Ç. –†–∞–∑–º–µ—Ä: $file_size"
        
        echo "$backup_path"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    else
        log_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞!"
        exit 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
backup_media() {
    local timestamp=$(date '+%Y%m%d_%H%M%S')
    local media_backup="$BACKUP_DIR/media_backup_${timestamp}.tar.gz"
    local media_dir="./media"  # –ü—É—Ç—å –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º
    
    if [ -d "$media_dir" ]; then
        log_info "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤..."
        
        if tar -czf "$media_backup" -C "$(dirname "$media_dir")" "$(basename "$media_dir")" 2>/dev/null; then
            local file_size=$(du -h "$media_backup" | cut -f1)
            log_success "–ë—ç–∫–∞–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω. –†–∞–∑–º–µ—Ä: $file_size"
            echo "$media_backup"
        else
            log_warning "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"
        fi
    else
        log_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $media_dir"
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
cleanup_old_backups() {
    log_info "–û—á–∏—Å—Ç–∫–∞ –±—ç–∫–∞–ø–æ–≤ —Å—Ç–∞—Ä—à–µ $RETENTION_DAYS –¥–Ω–µ–π..."
    
    local deleted_count=0
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    find "$BACKUP_DIR" -name "*.sql.gz" -mtime +$RETENTION_DAYS -type f | while read -r file; do
        log_info "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –±—ç–∫–∞–ø–∞: $(basename "$file")"
        rm -f "$file"
        ((deleted_count++))
    done
    
    find "$BACKUP_DIR" -name "media_backup_*.tar.gz" -mtime +$RETENTION_DAYS -type f | while read -r file; do
        log_info "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –±—ç–∫–∞–ø–∞ –º–µ–¥–∏–∞: $(basename "$file")"
        rm -f "$file"
        ((deleted_count++))
    done
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ MAX_BACKUPS —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö)
    local db_backups_count=$(find "$BACKUP_DIR" -name "*.sql.gz" -type f | wc -l)
    if [ "$db_backups_count" -gt "$MAX_BACKUPS" ]; then
        local excess=$((db_backups_count - MAX_BACKUPS))
        log_info "–£–¥–∞–ª–µ–Ω–∏–µ $excess –ª–∏—à–Ω–∏—Ö –±—ç–∫–∞–ø–æ–≤ –ë–î..."
        
        find "$BACKUP_DIR" -name "*.sql.gz" -type f -printf '%T@ %p\n' | \
        sort -n | head -n "$excess" | cut -d' ' -f2- | \
        while read -r file; do
            log_info "–£–¥–∞–ª–µ–Ω–∏–µ: $(basename "$file")"
            rm -f "$file"
        done
    fi
    
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
send_telegram_notification() {
    local message="$1"
    
    if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
        curl -s -X POST \
            "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d "chat_id=$TELEGRAM_CHAT_ID" \
            -d "text=$message" \
            -d "parse_mode=Markdown" > /dev/null 2>&1
    fi
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
send_email_notification() {
    local subject="$1"
    local message="$2"
    
    if [ -n "$EMAIL_RECIPIENT" ]; then
        echo "$message" | mail -s "$subject" "$EMAIL_RECIPIENT" 2>/dev/null || true
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±—ç–∫–∞–ø–∞
verify_backup() {
    local backup_file="$1"
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±—ç–∫–∞–ø–∞..."
    
    if [ -f "$backup_file" ]; then
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
        if [ -s "$backup_file" ]; then
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π gzip —Ñ–∞–π–ª
            if gzip -t "$backup_file" 2>/dev/null; then
                log_success "–ë—ç–∫–∞–ø –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"
                return 0
            else
                log_error "–ë—ç–∫–∞–ø –ø–æ–≤—Ä–µ–∂–¥–µ–Ω (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π gzip)"
                return 1
            fi
        else
            log_error "–ë—ç–∫–∞–ø –ø—É—Å—Ç–æ–π"
            return 1
        fi
    else
        log_error "–§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    local backup_file="$1"
    local media_backup="$2"
    local start_time="$3"
    local end_time="$4"
    
    local duration=$((end_time - start_time))
    local backup_size=$(du -h "$backup_file" 2>/dev/null | cut -f1 || echo "N/A")
    local media_size=$(du -h "$media_backup" 2>/dev/null | cut -f1 || echo "N/A")
    local total_backups=$(find "$BACKUP_DIR" -name "*.sql.gz" -type f | wc -l)
    
    local report="üìä *–û—Ç—á–µ—Ç –æ –±—ç–∫–∞–ø–µ Alekhin Clinic*

üïê –í—Ä–µ–º—è: $(date '+%Y-%m-%d %H:%M:%S')
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}—Å
üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${backup_size}
üñº –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã: ${media_size}
üì¶ –í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤: ${total_backups}
‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ"

    echo "$report"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    send_telegram_notification "$report"
    send_email_notification "–ë—ç–∫–∞–ø Alekhin Clinic - –£—Å–ø–µ—à–Ω–æ" "$report"
}

# ===========================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ===========================================

main() {
    local start_time=$(date +%s)
    
    log_info "üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–±—ç–∫–∞–ø–∞ Alekhin Clinic"
    log_info "========================================"
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä–æ–ª—è
    export PGPASSWORD="$DB_PASSWORD"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_backup_dir
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_database
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤
    local backup_file=$(create_backup)
    local media_backup=$(backup_media)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    if verify_backup "$backup_file"; then
        log_success "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±—ç–∫–∞–ø–∞"
        exit 1
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
    cleanup_old_backups
    
    local end_time=$(date +%s)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_report "$backup_file" "$media_backup" "$start_time" "$end_time"
    
    log_success "üéâ –ê–≤—Ç–æ–±—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
}

# ===========================================
# –ó–ê–ü–£–°–ö
# ===========================================

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-}" in
    --verify)
        if [ -n "$2" ]; then
            verify_backup "$2"
        else
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 --verify <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>"
            exit 1
        fi
        ;;
    --cleanup)
        create_backup_dir
        cleanup_old_backups
        ;;
    --help)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏—è]"
        echo ""
        echo "–û–ø—Ü–∏–∏:"
        echo "  (–±–µ–∑ –æ–ø—Ü–∏–π)  –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø"
        echo "  --verify     –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±—ç–∫–∞–ø–∞"
        echo "  --cleanup    –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã"
        echo "  --help       –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        ;;
    *)
        main
        ;;
esac