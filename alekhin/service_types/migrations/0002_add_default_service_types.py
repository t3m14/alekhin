from django.db import migrations

def create_default_service_types(apps, schema_editor):
    ServiceType = apps.get_model('service_types', 'ServiceType')
    
    types = [
        "Консультации и диагностика",
        "Уход за кожей лица",
        "Пилинги",
        "Инъекционная косметология",
        "Аппаратная косметология",
        "Лазерные процедуры",
        "Эстетическая косметология",
        "Косметология тела",
        "Склеротерапия",
        "Лазерное лечение вен (ЭВЛК)",
        "Минифлебэктомия",
        "Хирургическое лечение",
        "Профилактика и сопровождение",
        "Консервативное лечение лимфостаза",
        "Аппаратная лимфодренажная терапия",
        "Ручной лимфодренажный массаж",
        "Профилактика и ведение пациентов",
        "Малые гинекологические процедуры",
        "Лабораторная диагностика",
        "Профилактика и уход за женским здоровьем",
        "Лечение воспалительных и инфекционных заболеваний",
        "Гормональное здоровье и менструальный цикл",
        "Гинекологическая эндокринология",
        "Планирование беременности",
    ]
    
    # Удаляем дубликаты, сохраняя порядок
    unique_types = []
    for service_type in types:
        if service_type not in unique_types:
            unique_types.append(service_type)
    
    # Создаем записи только если их еще нет
    for type_name in unique_types:
        ServiceType.objects.get_or_create(
            name=type_name,
            defaults={
                'description': f'Услуги типа: {type_name}',
                'enabled': True,  # если у вас есть такое поле
            }
        )

def reverse_create_default_service_types(apps, schema_editor):
    ServiceType = apps.get_model('service_types', 'ServiceType')
    
    types = [
        "Консультации и диагностика",
        "Уход за кожей лица",
        "Пилинги",
        "Инъекционная косметология",
        "Аппаратная косметология",
        "Лазерные процедуры",
        "Эстетическая косметология",
        "Косметология тела",
        "Склеротерапия",
        "Лазерное лечение вен (ЭВЛК)",
        "Минифлебэктомия",
        "Хирургическое лечение",
        "Профилактика и сопровождение",
        "Консервативное лечение лимфостаза",
        "Аппаратная лимфодренажная терапия",
        "Ручной лимфодренажный массаж",
        "Профилактика и ведение пациентов",
        "Малые гинекологические процедуры",
        "Лабораторная диагностика",
        "Профилактика и уход за женским здоровьем",
        "Лечение воспалительных и инфекционных заболеваний",
        "Гормональное здоровье и менструальный цикл",
        "Гинекологическая эндокринология",
        "Планирование беременности",
    ]
    
    # Удаляем только те записи, которые мы создали
    ServiceType.objects.filter(name__in=types).delete()

class Migration(migrations.Migration):
    dependencies = [
        ('service_types', '0001_initial'),  # Замените на последнюю миграцию
    ]

    operations = [
        migrations.RunPython(
            create_default_service_types,
            reverse_create_default_service_types
        ),
    ]
